// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RecruitmentAgency.RelationalData;

#nullable disable

namespace RecruitmentAgency.RelationalData.Migrations
{
    [DbContext(typeof(RecruitmentDbContext))]
    [Migration("20250316224743_DomainUpdate")]
    partial class DomainUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActivityEmployer", b =>
                {
                    b.Property<Guid>("ActivitiesId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmployersId")
                        .HasColumnType("text");

                    b.HasKey("ActivitiesId", "EmployersId");

                    b.HasIndex("EmployersId");

                    b.ToTable("ActivityEmployer");
                });

            modelBuilder.Entity("EmployeeQualification", b =>
                {
                    b.Property<string>("EmployeesId")
                        .HasColumnType("text");

                    b.Property<Guid>("QualificationsId")
                        .HasColumnType("uuid");

                    b.HasKey("EmployeesId", "QualificationsId");

                    b.HasIndex("QualificationsId");

                    b.ToTable("EmployeeQualification");
                });

            modelBuilder.Entity("QualificationVacancy", b =>
                {
                    b.Property<Guid>("QualificationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacanciesId")
                        .HasColumnType("uuid");

                    b.HasKey("QualificationsId", "VacanciesId");

                    b.HasIndex("VacanciesId");

                    b.ToTable("QualificationVacancy");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.JobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<Guid?>("JobApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Verdict")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobApplicationId")
                        .IsUnique();

                    b.HasIndex("VacancyId");

                    b.ToTable("JobOffers");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Qualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Commission")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployerId")
                        .HasColumnType("text");

                    b.Property<decimal?>("MaxSalary")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinSalary")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Admin", b =>
                {
                    b.HasBaseType("RecruitmentAgency.Domain.User");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Employee", b =>
                {
                    b.HasBaseType("RecruitmentAgency.Domain.User");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Resume")
                        .HasColumnType("text");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Employer", b =>
                {
                    b.HasBaseType("RecruitmentAgency.Domain.User");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("MainAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Employer", (string)null);
                });

            modelBuilder.Entity("ActivityEmployer", b =>
                {
                    b.HasOne("RecruitmentAgency.Domain.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentAgency.Domain.Employer", null)
                        .WithMany()
                        .HasForeignKey("EmployersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeQualification", b =>
                {
                    b.HasOne("RecruitmentAgency.Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentAgency.Domain.Qualification", null)
                        .WithMany()
                        .HasForeignKey("QualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QualificationVacancy", b =>
                {
                    b.HasOne("RecruitmentAgency.Domain.Qualification", null)
                        .WithMany()
                        .HasForeignKey("QualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentAgency.Domain.Vacancy", null)
                        .WithMany()
                        .HasForeignKey("VacanciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.JobApplication", b =>
                {
                    b.HasOne("RecruitmentAgency.Domain.Employee", "Employee")
                        .WithMany("JobApplications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RecruitmentAgency.Domain.Vacancy", "Vacancy")
                        .WithMany("JobApplications")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.JobOffer", b =>
                {
                    b.HasOne("RecruitmentAgency.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RecruitmentAgency.Domain.JobApplication", "JobApplication")
                        .WithOne("JobOffer")
                        .HasForeignKey("RecruitmentAgency.Domain.JobOffer", "JobApplicationId");

                    b.HasOne("RecruitmentAgency.Domain.Vacancy", "Vacancy")
                        .WithMany("JobOffers")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("JobApplication");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Qualification", b =>
                {
                    b.HasOne("RecruitmentAgency.Domain.Profession", "Profession")
                        .WithMany("AvailableQualifications")
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Vacancy", b =>
                {
                    b.HasOne("RecruitmentAgency.Domain.Employer", "Employer")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmployerId");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Admin", b =>
                {
                    b.HasOne("RecruitmentAgency.Domain.User", null)
                        .WithOne()
                        .HasForeignKey("RecruitmentAgency.Domain.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Employee", b =>
                {
                    b.HasOne("RecruitmentAgency.Domain.User", null)
                        .WithOne()
                        .HasForeignKey("RecruitmentAgency.Domain.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Employer", b =>
                {
                    b.HasOne("RecruitmentAgency.Domain.User", null)
                        .WithOne()
                        .HasForeignKey("RecruitmentAgency.Domain.Employer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.JobApplication", b =>
                {
                    b.Navigation("JobOffer");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Profession", b =>
                {
                    b.Navigation("AvailableQualifications");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Vacancy", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("JobOffers");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Employee", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("RecruitmentAgency.Domain.Employer", b =>
                {
                    b.Navigation("Vacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
