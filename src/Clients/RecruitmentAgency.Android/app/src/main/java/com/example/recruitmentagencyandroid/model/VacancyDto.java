/*
 * RecruitmentAgency.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.recruitmentagencyandroid.model;

import java.util.Objects;

import com.example.recruitmentagencyandroid.JSON;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * VacancyDto
 */
public class VacancyDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nullable
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_MIN_SALARY = "minSalary";
  @SerializedName(SERIALIZED_NAME_MIN_SALARY)
  @javax.annotation.Nullable
  private Double minSalary;

  public static final String SERIALIZED_NAME_MAX_SALARY = "maxSalary";
  @SerializedName(SERIALIZED_NAME_MAX_SALARY)
  @javax.annotation.Nullable
  private Double maxSalary;

  public static final String SERIALIZED_NAME_COMMISSION = "commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  @javax.annotation.Nullable
  private Double commission;

  public static final String SERIALIZED_NAME_EMPLOYER_ID = "employerId";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_ID)
  @javax.annotation.Nullable
  private String employerId;

  public static final String SERIALIZED_NAME_EMPLOYER_NAME = "employerName";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_NAME)
  @javax.annotation.Nullable
  private String employerName;

  public static final String SERIALIZED_NAME_QUALIFICATIONS = "qualifications";
  @SerializedName(SERIALIZED_NAME_QUALIFICATIONS)
  @javax.annotation.Nullable
  private List<String> qualifications;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public VacancyDto() {
  }

  public VacancyDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public VacancyDto title(@javax.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }


  public VacancyDto description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public VacancyDto minSalary(@javax.annotation.Nullable Double minSalary) {
    this.minSalary = minSalary;
    return this;
  }

  /**
   * Get minSalary
   * @return minSalary
   */
  @javax.annotation.Nullable
  public Double getMinSalary() {
    return minSalary;
  }

  public void setMinSalary(@javax.annotation.Nullable Double minSalary) {
    this.minSalary = minSalary;
  }


  public VacancyDto maxSalary(@javax.annotation.Nullable Double maxSalary) {
    this.maxSalary = maxSalary;
    return this;
  }

  /**
   * Get maxSalary
   * @return maxSalary
   */
  @javax.annotation.Nullable
  public Double getMaxSalary() {
    return maxSalary;
  }

  public void setMaxSalary(@javax.annotation.Nullable Double maxSalary) {
    this.maxSalary = maxSalary;
  }


  public VacancyDto commission(@javax.annotation.Nullable Double commission) {
    this.commission = commission;
    return this;
  }

  /**
   * Get commission
   * @return commission
   */
  @javax.annotation.Nullable
  public Double getCommission() {
    return commission;
  }

  public void setCommission(@javax.annotation.Nullable Double commission) {
    this.commission = commission;
  }


  public VacancyDto employerId(@javax.annotation.Nullable String employerId) {
    this.employerId = employerId;
    return this;
  }

  /**
   * Get employerId
   * @return employerId
   */
  @javax.annotation.Nullable
  public String getEmployerId() {
    return employerId;
  }

  public void setEmployerId(@javax.annotation.Nullable String employerId) {
    this.employerId = employerId;
  }


  public VacancyDto employerName(@javax.annotation.Nullable String employerName) {
    this.employerName = employerName;
    return this;
  }

  /**
   * Get employerName
   * @return employerName
   */
  @javax.annotation.Nullable
  public String getEmployerName() {
    return employerName;
  }

  public void setEmployerName(@javax.annotation.Nullable String employerName) {
    this.employerName = employerName;
  }


  public VacancyDto qualifications(@javax.annotation.Nullable List<String> qualifications) {
    this.qualifications = qualifications;
    return this;
  }

  public VacancyDto addQualificationsItem(String qualificationsItem) {
    if (this.qualifications == null) {
      this.qualifications = new ArrayList<>();
    }
    this.qualifications.add(qualificationsItem);
    return this;
  }

  /**
   * Get qualifications
   * @return qualifications
   */
  @javax.annotation.Nullable
  public List<String> getQualifications() {
    return qualifications;
  }

  public void setQualifications(@javax.annotation.Nullable List<String> qualifications) {
    this.qualifications = qualifications;
  }


  public VacancyDto createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VacancyDto vacancyDto = (VacancyDto) o;
    return Objects.equals(this.id, vacancyDto.id) &&
        Objects.equals(this.title, vacancyDto.title) &&
        Objects.equals(this.description, vacancyDto.description) &&
        Objects.equals(this.minSalary, vacancyDto.minSalary) &&
        Objects.equals(this.maxSalary, vacancyDto.maxSalary) &&
        Objects.equals(this.commission, vacancyDto.commission) &&
        Objects.equals(this.employerId, vacancyDto.employerId) &&
        Objects.equals(this.employerName, vacancyDto.employerName) &&
        Objects.equals(this.qualifications, vacancyDto.qualifications) &&
        Objects.equals(this.createdAt, vacancyDto.createdAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, description, minSalary, maxSalary, commission, employerId, employerName, qualifications, createdAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VacancyDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    minSalary: ").append(toIndentedString(minSalary)).append("\n");
    sb.append("    maxSalary: ").append(toIndentedString(maxSalary)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    employerId: ").append(toIndentedString(employerId)).append("\n");
    sb.append("    employerName: ").append(toIndentedString(employerName)).append("\n");
    sb.append("    qualifications: ").append(toIndentedString(qualifications)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("minSalary");
    openapiFields.add("maxSalary");
    openapiFields.add("commission");
    openapiFields.add("employerId");
    openapiFields.add("employerName");
    openapiFields.add("qualifications");
    openapiFields.add("createdAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VacancyDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VacancyDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VacancyDto is not found in the empty JSON string", VacancyDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VacancyDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VacancyDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("employerId") != null && !jsonObj.get("employerId").isJsonNull()) && !jsonObj.get("employerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employerId").toString()));
      }
      if ((jsonObj.get("employerName") != null && !jsonObj.get("employerName").isJsonNull()) && !jsonObj.get("employerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employerName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("qualifications") != null && !jsonObj.get("qualifications").isJsonNull() && !jsonObj.get("qualifications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `qualifications` to be an array in the JSON string but got `%s`", jsonObj.get("qualifications").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VacancyDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VacancyDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VacancyDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VacancyDto.class));

       return (TypeAdapter<T>) new TypeAdapter<VacancyDto>() {
           @Override
           public void write(JsonWriter out, VacancyDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VacancyDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VacancyDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VacancyDto
   * @throws IOException if the JSON string is invalid with respect to VacancyDto
   */
  public static VacancyDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VacancyDto.class);
  }

  /**
   * Convert an instance of VacancyDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

