/*
 * RecruitmentAgency.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.recruitmentagencyandroid.model;

import java.util.Objects;

import com.example.recruitmentagencyandroid.JSON;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * VacancyApplicationDto
 */
public class VacancyApplicationDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_EMPLOYER_NAME = "employerName";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_NAME)
  @javax.annotation.Nullable
  private String employerName;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  @javax.annotation.Nullable
  private String employeeId;

  public static final String SERIALIZED_NAME_EMPLOYEE_NAME = "employeeName";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NAME)
  @javax.annotation.Nullable
  private String employeeName;

  public static final String SERIALIZED_NAME_VACANCY_ID = "vacancyId";
  @SerializedName(SERIALIZED_NAME_VACANCY_ID)
  @javax.annotation.Nullable
  private UUID vacancyId;

  public static final String SERIALIZED_NAME_VACANCY_TITLE = "vacancyTitle";
  @SerializedName(SERIALIZED_NAME_VACANCY_TITLE)
  @javax.annotation.Nullable
  private String vacancyTitle;

  public static final String SERIALIZED_NAME_APPLICATION_DATE = "applicationDate";
  @SerializedName(SERIALIZED_NAME_APPLICATION_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime applicationDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private ApplicationStatus status;

  public VacancyApplicationDto() {
  }

  public VacancyApplicationDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public VacancyApplicationDto employerName(@javax.annotation.Nullable String employerName) {
    this.employerName = employerName;
    return this;
  }

  /**
   * Get employerName
   * @return employerName
   */
  @javax.annotation.Nullable
  public String getEmployerName() {
    return employerName;
  }

  public void setEmployerName(@javax.annotation.Nullable String employerName) {
    this.employerName = employerName;
  }


  public VacancyApplicationDto employeeId(@javax.annotation.Nullable String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

  /**
   * Get employeeId
   * @return employeeId
   */
  @javax.annotation.Nullable
  public String getEmployeeId() {
    return employeeId;
  }

  public void setEmployeeId(@javax.annotation.Nullable String employeeId) {
    this.employeeId = employeeId;
  }


  public VacancyApplicationDto employeeName(@javax.annotation.Nullable String employeeName) {
    this.employeeName = employeeName;
    return this;
  }

  /**
   * Get employeeName
   * @return employeeName
   */
  @javax.annotation.Nullable
  public String getEmployeeName() {
    return employeeName;
  }

  public void setEmployeeName(@javax.annotation.Nullable String employeeName) {
    this.employeeName = employeeName;
  }


  public VacancyApplicationDto vacancyId(@javax.annotation.Nullable UUID vacancyId) {
    this.vacancyId = vacancyId;
    return this;
  }

  /**
   * Get vacancyId
   * @return vacancyId
   */
  @javax.annotation.Nullable
  public UUID getVacancyId() {
    return vacancyId;
  }

  public void setVacancyId(@javax.annotation.Nullable UUID vacancyId) {
    this.vacancyId = vacancyId;
  }


  public VacancyApplicationDto vacancyTitle(@javax.annotation.Nullable String vacancyTitle) {
    this.vacancyTitle = vacancyTitle;
    return this;
  }

  /**
   * Get vacancyTitle
   * @return vacancyTitle
   */
  @javax.annotation.Nullable
  public String getVacancyTitle() {
    return vacancyTitle;
  }

  public void setVacancyTitle(@javax.annotation.Nullable String vacancyTitle) {
    this.vacancyTitle = vacancyTitle;
  }


  public VacancyApplicationDto applicationDate(@javax.annotation.Nullable OffsetDateTime applicationDate) {
    this.applicationDate = applicationDate;
    return this;
  }

  /**
   * Get applicationDate
   * @return applicationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApplicationDate() {
    return applicationDate;
  }

  public void setApplicationDate(@javax.annotation.Nullable OffsetDateTime applicationDate) {
    this.applicationDate = applicationDate;
  }


  public VacancyApplicationDto status(@javax.annotation.Nullable ApplicationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ApplicationStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable ApplicationStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VacancyApplicationDto vacancyApplicationDto = (VacancyApplicationDto) o;
    return Objects.equals(this.id, vacancyApplicationDto.id) &&
        Objects.equals(this.employerName, vacancyApplicationDto.employerName) &&
        Objects.equals(this.employeeId, vacancyApplicationDto.employeeId) &&
        Objects.equals(this.employeeName, vacancyApplicationDto.employeeName) &&
        Objects.equals(this.vacancyId, vacancyApplicationDto.vacancyId) &&
        Objects.equals(this.vacancyTitle, vacancyApplicationDto.vacancyTitle) &&
        Objects.equals(this.applicationDate, vacancyApplicationDto.applicationDate) &&
        Objects.equals(this.status, vacancyApplicationDto.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, employerName, employeeId, employeeName, vacancyId, vacancyTitle, applicationDate, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VacancyApplicationDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    employerName: ").append(toIndentedString(employerName)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    employeeName: ").append(toIndentedString(employeeName)).append("\n");
    sb.append("    vacancyId: ").append(toIndentedString(vacancyId)).append("\n");
    sb.append("    vacancyTitle: ").append(toIndentedString(vacancyTitle)).append("\n");
    sb.append("    applicationDate: ").append(toIndentedString(applicationDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("employerName");
    openapiFields.add("employeeId");
    openapiFields.add("employeeName");
    openapiFields.add("vacancyId");
    openapiFields.add("vacancyTitle");
    openapiFields.add("applicationDate");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VacancyApplicationDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VacancyApplicationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VacancyApplicationDto is not found in the empty JSON string", VacancyApplicationDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VacancyApplicationDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VacancyApplicationDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("employerName") != null && !jsonObj.get("employerName").isJsonNull()) && !jsonObj.get("employerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employerName").toString()));
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("employeeName") != null && !jsonObj.get("employeeName").isJsonNull()) && !jsonObj.get("employeeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeName").toString()));
      }
      if ((jsonObj.get("vacancyId") != null && !jsonObj.get("vacancyId").isJsonNull()) && !jsonObj.get("vacancyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vacancyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vacancyId").toString()));
      }
      if ((jsonObj.get("vacancyTitle") != null && !jsonObj.get("vacancyTitle").isJsonNull()) && !jsonObj.get("vacancyTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vacancyTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vacancyTitle").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ApplicationStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VacancyApplicationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VacancyApplicationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VacancyApplicationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VacancyApplicationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<VacancyApplicationDto>() {
           @Override
           public void write(JsonWriter out, VacancyApplicationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VacancyApplicationDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VacancyApplicationDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VacancyApplicationDto
   * @throws IOException if the JSON string is invalid with respect to VacancyApplicationDto
   */
  public static VacancyApplicationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VacancyApplicationDto.class);
  }

  /**
   * Convert an instance of VacancyApplicationDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

